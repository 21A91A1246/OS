import numpy as np
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
def add_noise(images):
  noise_factor = 0.5
  noisy_images = images + noise_factor * np.random.randn(*images.shape)
  return np.clip(noisy_images, 0., 1.)
(x_train, _), (x_test, _) = keras.datasets.cifar10.load_data()
x_train, x_test = x_train.astype('float32') / 255.0, x_test.astype('float32') / 255.0
x_train_noisy = add_noise(x_train).reshape(-1, 32*32*3)
x_test_noisy = add_noise(x_test).reshape(-1, 32*32*3)
x_train = x_train.reshape(-1, 32*32*3)
x_test = x_test.reshape(-1, 32*32*3)
def create_model(hidden_units=128, activation='relu'):
  model = keras.Sequential([
  layers.Input(shape=(32*32*3,)),
  layers.Dense(hidden_units, activation=activation),
  layers.Dense(hidden_units, activation=activation),
  layers.Dense(32*32*3, activation='sigmoid')
  ])
  model.compile(optimizer='adam', loss='mean_squared_error')
  return model
model = create_model()
model.fit(x_train_noisy, x_train, epochs=10, batch_size=256, validation_split=0.2)
test_loss = model.evaluate(x_test_noisy, x_test)
print("Test Loss:", test_loss)
import matplotlib.pyplot as plt
# Denoising and Visualization
def display_images(noisy, clean, denoised, index=0):
  plt.figure(figsize=(12, 4))
  plt.subplot(1, 3, 1)
  plt.title("Noisy Image")
  plt.imshow(noisy[index].reshape(32, 32, 3))
  plt.subplot(1, 3, 2)
  plt.title("Clean Image")
  plt.imshow(clean[index].reshape(32, 32, 3))
  plt.subplot(1, 3, 3)
  plt.title("Denoised Image")
  plt.imshow(denoised[index].reshape(32, 32, 3))
  plt.show()
denoised_images = model.predict(x_test_noisy)
display_images(x_test_noisy, x_test, denoised_images)
