import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras import datasets
(train_img, train_labels),(test_img, test_labels)=datasets.cifar10.load_data()
train_img, test_img=train_img/255.0,test_img/255.0
class_name=['airplane','automobile','bird','cat','deer','dog','frog','horse','ship','truck']
plt.figure(figsize=(15,15))
for i in range(10):
  plt.subplot(5,5,i+1)
  plt.xticks([])
  plt.yticks([])
  plt.imshow(train_img[i])
  plt.xlabel(class_name[train_labels[i][0]])
  plt.show()
#creating the CNN model
#initialization of model
from keras.models import Sequential
classifier=Sequential()
#step 1 - Convolution
from keras.layers import Conv2D
classifier.add(Conv2D(32,(3,3),input_shape=(32,32,3),activation='relu'))
from keras.layers import MaxPooling2D
classifier.add(MaxPooling2D(pool_size=(2,2)))
# the 32 feature maps from Conv2D output pass-through maxpooling of (2,2) size
#Adding a second convolutional layer and Polling Layer
classifier.add(Conv2D (32,(3,3),activation='relu'))
classifier.add(MaxPooling2D(pool_size=(2,2)))
#step 3 - Flattening
from keras.layers import Flatten
classifier.add(Flatten())
#step 4 Full Connection
from keras.layers import Dense
classifier.add(Dense(units=64,activation='relu'))
#creates a fully connected neural network with 128 neurons
classifier.add(Dense(units=10,activation='softmax'))
#this fully connected layer should have number neurons as many as the class number
classifier.summary()
# from tensorflow.keras.utils import plot_model
from keras.utils import plot_model
plot_model(classifier,to_file='cnn_mode.png')
#compile the model
#Compiling the CNN
classifier.compile(optimizer='adam',loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),metrics=['accuracy'])
#optimizer: is an algorithm helps us to minimize (or maximize) an Objectivefunctionis.
history=classifier.fit(train_img,train_labels,epochs=10,validation_data=(test_img,test_labels))
